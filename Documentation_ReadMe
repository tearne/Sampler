Usage
=====

Publish sampler to your local Ivy2 repository using "sbt publish-local".  Then go to your new SBT project
and add the Sampler dependency, which will be resolved from the local cache.

    "org.tearne" % "sampler-core_2.10" % "0.1.1"
    "org.tearne" % "sampler-cluster_2.10" % "0.1.1"


TODO/Issues
======

If ABC generations complete faster than the reporting operations (e.g. running an R script) 
then the entire application may quit before reporting has caught up.

When creating the ScalaDoc with API the index page for the root of the project shows two packages, akka 
and sampler, where we would prefer it to lead directly to sampler package

At the moment it's possible to run two different cluster applications on the same machine, and they
will interfere with each other.

Future Enhancements
===================

Allow ABC tolerance to be configured from config file, e.g. descent rate can be quantile other than 50%

Building documentation
======================

1) Create the documentation on your local machine using either the doc (for a single sub-project) or unidoc commands in sbt.

	The documentation folder will be created in the target directory; e.g. target/scala-2.10/unidoc/

2) Rename the folder according to the current build e.g. Sampler-0.1.1 and move into the gh-pages branch

3) Once pushed, the documentation will be available at tearne.github.io e.g.
	
	tearne.github.io/Sampler/Sampler-0.1.1

Troubleshooting
===============

Q) Why won't the examples run?

	When the SBT Eclipse plug-in sets up an Eclipse project it doesn't add src/main/resources to the build path, therefore examples
	cannot find configuration files. Fix by right-clicking on the folder and selecting "Build Path --> Use as Source Folder"   
	
Q) I have written new tests but they won't run from SBT and/or Eclipse because files read in from disk cannot be found

	Eclipse will find testing data by resolving relative paths from project directory, but SBT doesn't. Alternatively
	SBT will find files in src/test/resources/ but eclipse would need the relative path. 
	The way to fix it is:
	1) Use 'getResources' to access test resources in 'src'/test/resources' 
		e.g. Paths.get(getClass.getClassLoader.getResource("someFile.txt").toURI())
	2) Add 'src/test/resources' to the eclipse build path by selecting "Build Path --> Use as Source Folder"
	3) Go to build settings and ensure the output directory for resources is relative to 
		'target/scala2-10/test-classes', rather than 'default'.

R pre-requisites (for example)
===============================
sudo R
proxy = "http://host:port"
Sys.setenv(http_proxy=proxy)
Sys.setenv(https_proxy=proxy)
install.packages(c("ggplot2", "reshape", "deSolve", "jsonlite", "plyr", "GGally"), dependencies=T, repos="http://cran.ma.imperial.ac.uk")