package sampler.abc.actor.message

import sampler.abc.actor.Tagged
import sampler.abc.Scored
import sampler.abc.Weighted

/*
 * Messages that are generated by workers
 */
sealed trait WorkerResult[P]

final case class ScoredParticles[P](seq: Seq[Tagged[Scored[P]]]) extends WorkerResult[P]{
  def add(toAdd: ScoredParticles[P]) = ScoredParticles(seq ++ toAdd.seq)
  def add(toAdd: Seq[Tagged[Scored[P]]]) = ScoredParticles(seq ++ toAdd)
  
  def size = seq.length
}
object ScoredParticles{
	def empty[P] = ScoredParticles(Seq.empty[Tagged[Scored[P]]])
}

final case class WeighedParticles[P](seq: Seq[Tagged[Weighted[P]]]) extends WorkerResult[P]{
  def add(toAdd: WeighedParticles[P]) = WeighedParticles(seq ++ toAdd.seq)
  def add(toAdd: Seq[Tagged[Weighted[P]]]) = WeighedParticles(seq ++ toAdd)
  
  def size = seq.length
}
object WeighedParticles{
	def empty[P] = WeighedParticles(Seq.empty[Tagged[Weighted[P]]])
}