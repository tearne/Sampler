network-outbreak-example {
  abc {
    job {
      replicates = 10
      particles = 500
      generations = 50
    }

    algorithm {
      particle-retries = 10
      particle-chunk-size = 10
      tolerance-descent-percentile = 0.5
      fewest-accepted-local-particles = 5
    }

    cluster {
      system-name: "sampler-examples"
      max-particle-memory = 10000
      terminate-at-target-generation = true
      futures-timeout = 48 hour
      mixing {
        rate = 10 second
        num-particles = 200
        response-threshold = 500 milliseconds
      }
      size-reporting = 1 minute
    }
  }
}

unfair-coin-example {
  meta = [{
    project = "sampler examples - Unfair Coin"
    description = Determine True probability of heads given outcomes
  }]
  abc {
    job {
      replicates = 100
      particles = 2000
      generations = 3
    }

    algorithm {
      particle-retries = 100
      particle-chunk-size = 500
      tolerance-descent-percentile = 0.5
      fewest-accepted-local-particles = 5
    }

    cluster {
      system-name: "sampler-examples"
      max-particle-memory = 10000
      terminate-at-target-generation = true
      futures-timeout = 10 hour
      mixing {
        rate = 5 seconds
        num-particles = 100
        response-threshold = 500 milliseconds
      }
      size-reporting = 10 seconds
    }
  }
}

flock-mortality-example {
  meta = [{
    project = "sampler examples - flock mortality"
    description = Fit ODE parameters to observed death and produciton data
  }]
  abc {
    job {
      replicates = 1
      particles = 1000
      generations = 10
    }

    algorithm {
      particle-retries = 1000
      particle-chunk-size = 500
      tolerance-descent-percentile = 0.5
      fewest-accepted-local-particles = 5
    }

    cluster {
      system-name: "sampler-examples"
      terminate-at-target-generation = true
      futures-timeout = 10 hour
      max-particle-memory = 10000
      mixing {
        rate = 1 second
        num-particles = 200
        response-threshold = 500 milliseconds
      }
      size-reporting = 1 minute
    }
  }
}

sampler {
  num-workers = 2

  work-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 1
      parallelism-factor = 1
    }
    throughput = 1
  }

  receive-dispatcher {
    type = "Dispatcher"
    executor = "thread-pool-executor"
    type = PinnedDispatcher
  }

}

akka {
  jvm-exit-on-fatal-error = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    serialize-messages = off
    provider = "akka.cluster.ClusterActorRefProvider"
    deployment {
      /root/work-router {
        router = broadcast-pool
        nr-of-instances = ${sampler.num-workers}
        //Workers are configured (hard coded) to pick up sampler.work-dispatcher
      }
      /root/receiver {
        dispatcher = sampler.receive-dispatcher
      }
      /root/flusher {
        dispatcher = sampler.work-dispatcher
      }
    }
    default-dispatcher {
      parallelism-min = 1
      parallelism-factor = 1
      throughput = 1
    }
  }
  remote {
    log-remote-lifecycle-events = off
    log-sent-messages = off
    log-received- messages = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
      maximum-frame-size = 10 MiB
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://sampler-examples@127.0.0.1:2552"
    ]
    failure-detector {
      threshold = 15
      acceptable-heartbeat-pause = 10 s
    }
    auto-down-unreachable-after = 1 minute
  }
}
