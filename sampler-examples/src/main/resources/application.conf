network-outbreak-example {
	abc {
		job {
			replicates = 10
			particles = 200
			generations = 50
		}
		
		algorithm {
			particle-retries = 10
			particle-chunk-size = 20
		}
			
		cluster {
			particle-memory-generations = 3
			terminate-at-target-generation = true
			futures-timeout = 48 hour
			mixing {
				rate = 1 second
				num-particles = 200
				response-threshold = 500 milliseconds
			}
		}
	}
}

unfair-coin-example {
	abc {
		job {
			replicates = 100
			particles = 2000
			generations = 3
		}
		
		algorithm {
			particle-retries = 100
			particle-chunk-size = 500
		}
			
		cluster {
			particle-memory-generations = 3
			terminate-at-target-generation = true
			futures-timeout = 10 hour
			mixing {
				rate = 1 second
				num-particles = 200
				response-threshold = 500 milliseconds
			}
		}
	}
}

flock-mortality-example {
	abc {
		job {
			replicates = 1
			particles = 1000
			generations = 10
		}
		
		algorithm {
			particle-retries = 1000
			particle-chunk-size = 500
		}
			
		cluster {
			particle-memory-generations = 3
			terminate-at-target-generation = true
			futures-timeout = 10 hour
			mixing {
				rate = 1 second
				num-particles = 200
				response-threshold = 500 milliseconds
			}
		}
	}
}
	
sampler {	
	# Picked up in code for heavy processing
	work-dispatcher {
	    type = "Dispatcher"
	    executor = "fork-join-executor"
	    fork-join-executor {
	    	parallelism-min = 1
	    	parallelism-factor = 1
	    }
	    throughput = 1
	}
	
	# Assigned in config
	receive-dispatcher {
		type = "Dispatcher"
		executor = "thread-pool-executor"
		type = PinnedDispatcher
	}
	
	# Assigned in config
	remoting-dispatcher {
	    type = "Dispatcher"
	    executor = "fork-join-executor"
	    fork-join-executor {
	    	parallelism-min = 1
	    	parallelism-factor = 1
	    }
	}
}

akka {
	jvm-exit-on-fatal-error = on
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	loglevel = INFO
    actor {
    	serialize-messages = off
	    provider = "akka.cluster.ClusterActorRefProvider"
	    deployment {
	    	/root/work-router {
	    		router = broadcast-pool
	    		nr-of-instances = 1
	    	}
	    	/root/receiver {
	    		dispatcher = sampler.receive-dispatcher
	    	}
	    }
	    default-dispatcher {
	    	parallelism-min = 1
	    	parallelism-factor = 1
	    	throughput = 1
	    }
    }
    remote {
	    log-remote-lifecycle-events = off
	    log-sent-messages = off
	    log-received- messages = off
	    netty.tcp {
	    	hostname = "127.0.0.1"
	    	port = 2552
	    	maximum-frame-size = 10 MiB
	    }
    }
     
    cluster {
	    seed-nodes = [
		    "akka.tcp://ABC@127.0.0.1:2552"
		]
     	failure-detector.threshold = 12
    	use-dispatcher = sampler.remoting-dispatcher
    }
}
